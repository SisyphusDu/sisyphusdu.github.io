<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OO HomeWork 1-3</title>
      <link href="/2022/03/25/OO-HomeWork-1-3/"/>
      <url>/2022/03/25/OO-HomeWork-1-3/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-OO-第一单元总结"><a href="#BUAA-OO-第一单元总结" class="headerlink" title="BUAA OO 第一单元总结"></a>BUAA OO 第一单元总结</h1><h2 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本次作业需要完成的任务为：读入一个包含加、减、乘、乘方以及括号（其中括号的深度至多为 1 层）的单变量表达式，输出恒等变形展开所有括号后的表达式。</p><p>在本次作业中，展开所有括号的定义是：对原输入表达式 E 做恒等变形，得到新表达式 E’，且 E’中不含有字符 ‘(‘ 和 ‘)’ 。</p><h3 id="UML-图与类结构"><a href="#UML-图与类结构" class="headerlink" title="UML 图与类结构"></a>UML 图与类结构</h3><p>类图如下</p><p><img src="HW1.jpg" alt="HW1"></p><p>其中，各个类的含义如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|- MainClass：主类</span><br><span class="line">|- expr (<span class="keyword">package</span>)：表达式包</span><br><span class="line">    |- Factor (implement)：因子类</span><br><span class="line">        |- Number：常数类</span><br><span class="line">        |- FactorX：变量类</span><br><span class="line">        |- Power：指数类</span><br><span class="line">        |- Term：项类</span><br><span class="line">        |- Expr：表达式类</span><br><span class="line">|- Parser：语法分析器</span><br><span class="line">|- Lexer：词法分析器</span><br><span class="line">|- ExprTerm：表达式最简项</span><br><span class="line">|- Calculate: 计算化简类</span><br></pre></td></tr></table></figure></p><h3 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h3><p>使用了递归下降的方法解析表达式，为之后的各种嵌套打下基础。解析的同时生成后缀表达式，为之后的计算做好准备。<br>采用了边计算边化简的方法，这样可以显著的提升程序的速度。当计算结束后再化简一次，以保证表达式的最简，最后输出结果。</p><h3 id="度量分析"><a href="#度量分析" class="headerlink" title="度量分析"></a>度量分析</h3><div class="table-container"><table><thead><tr><th>Class</th><th>OCavg</th><th>OCmax</th><th>WMC</th><th></th></tr></thead><tbody><tr><td>Calculate</td><td>3.80</td><td>10</td><td>38</td><td></td></tr><tr><td>ExprTerm</td><td>1.80</td><td>3</td><td>9</td><td></td></tr><tr><td>Lexer</td><td>3.75</td><td>10</td><td>15</td><td></td></tr><tr><td>MainClass</td><td>1.00</td><td>1</td><td>1</td><td></td></tr><tr><td>Parser</td><td>2.40</td><td>5</td><td>12</td><td></td></tr><tr><td>expr.Expr</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.FactorX</td><td>1.00</td><td>1</td><td>2</td><td></td></tr><tr><td>expr.Number</td><td>1.00</td><td>1</td><td>2</td><td></td></tr><tr><td>expr.Power</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.Term</td><td>1.67</td><td>3</td><td>5</td></tr></tbody></table></div><p>代码复杂度总体可以接受，但计算类的复杂度较高，因为此时还没有把化简的部分提取出来。<br>在第二次作业中，我把化简方法单独提取成了一个类，降低了计算类的复杂度。</p><h3 id="方法圈复杂度分析"><a href="#方法圈复杂度分析" class="headerlink" title="方法圈复杂度分析"></a>方法圈复杂度分析</h3><div class="table-container"><table><thead><tr><th>Method</th><th>CogC</th><th>ev(G)</th><th>iv(G)</th><th>v(G)</th></tr></thead><tbody><tr><td>Calculate.Calculate(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.add(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.cal()</td><td>5</td><td>3</td><td>2</td><td>6</td></tr><tr><td>Calculate.count(String)</td><td>4</td><td>1</td><td>3</td><td>3</td></tr><tr><td>Calculate.cutStr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.mul(String, String)</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>Calculate.pow(String, String)</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>Calculate.printExpr(ExprTerm, StringBuilder)</td><td>12</td><td>1</td><td>6</td><td>6</td></tr><tr><td>Calculate.sum(String)</td><td>3</td><td>2</td><td>3</td><td>3</td></tr><tr><td>Calculate.toSimplify(String)</td><td>15</td><td>4</td><td>10</td><td>10</td></tr><tr><td>ExprTerm.ExprTerm(String, int)</td><td>5</td><td>1</td><td>1</td><td>3</td></tr><tr><td>ExprTerm.compareTo(ExprTerm)</td><td>3</td><td>3</td><td>1</td><td>3</td></tr><tr><td>ExprTerm.getCoes()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.getExps()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.setCoes(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.Lexer(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.getNumber()</td><td>3</td><td>1</td><td>4</td><td>4</td></tr><tr><td>Lexer.next()</td><td>19</td><td>7</td><td>6</td><td>13</td></tr><tr><td>Lexer.peek()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>MainClass.main(String[])</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Parser.Parser(Lexer)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Parser.parseExpr()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseFactor()</td><td>12</td><td>3</td><td>7</td><td>7</td></tr><tr><td>Parser.parsePower()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseTerm()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>expr.Expr.Expr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.addTerm(Term)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.FactorX.FactorX(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.FactorX.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Number.Number(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Number.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.Power()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.addFactor(Factor)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.Term.Term()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.addPower(Power)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr></tbody></table></div><p>大部分方法圈复杂度较低，在较为合理的范围内。</p><h3 id="化简策略"><a href="#化简策略" class="headerlink" title="化简策略"></a>化简策略</h3><p>1.将x**2化简为x*x,减少一个字符<br>2.如果表达式第一项为负，将一个正的项提取到表达式的最前面。<br>3.合并同类项<br>4.合理省略了各种数为1的情况。</p><h3 id="Bug分析"><a href="#Bug分析" class="headerlink" title="Bug分析"></a>Bug分析</h3><p>第一次作业强测互测自测都没有bug。</p><h3 id="Hack策略"><a href="#Hack策略" class="headerlink" title="Hack策略"></a>Hack策略</h3><p>采用了随机生成数据与手动构造数据相结合的方法。<br>但因为第一次作业较为简单，最终只Hack到了一个bug。</p><h3 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h3><p>主要参考了训练给出的递归下降的主体结构，通过词法分析器Lexer与语法分析器Parser解析表达式生成后缀表达式。而化简主要运用了正则表达式和捕获组，但面对第二次作业的嵌套时，正则表达式无法成功提取到项，只好在第二次作业对化简方法进行了重构。</p><h3 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h3><p>学到了递归下降方法，并熟悉了正则表达式与捕获组的使用，replaceAll应该慎用，但有时使用可以让表达式的结构更加的规整，降低解析的难度。</p><h2 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>本次作业中需要完成的任务为：读入一系列自定义函数的定义以及一个包含简单幂函数、简单三角函数、简单自定义函数调用以及求和函数的表达式，输出恒等变形展开所有括号后的表达式。</p><p>在本次作业中，展开所有括号的定义是：对原输入表达式 E 做恒等变形，得到新表达式 E’ 。其中，E’中不再含有自定义函数与求和函数，且只包含必要的括号。</p><h3 id="UML-图与类结构-1"><a href="#UML-图与类结构-1" class="headerlink" title="UML 图与类结构"></a>UML 图与类结构</h3><p>类图如下</p><p><img src="HW2.jpg" alt="HW2"></p><p>其中，各个类的含义如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|- MainClass：主类</span><br><span class="line">|- expr (<span class="keyword">package</span>)：表达式包</span><br><span class="line">    |- Factor (<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>)：因子类</span></span><br><span class="line">        |- Number：常数类</span><br><span class="line">        |- SelfFun：自定义函数</span><br><span class="line">        |- SumFun：求和函数</span><br><span class="line">        |- TriFun：三角函数</span><br><span class="line">        |- VarX：变量类</span><br><span class="line">        |- Power：指数类</span><br><span class="line">        |- Term：项类</span><br><span class="line">        |- Expr：表达式类</span><br><span class="line">|- Parser：语法分析器</span><br><span class="line">|- Lexer：词法分析器</span><br><span class="line">|- ExprTerm：表达式最简项</span><br><span class="line">|- Calculate: 计算类</span><br><span class="line">|- Simplify: 同类项合并化简</span><br><span class="line">|- TriSimplify: 三角函数化简</span><br></pre></td></tr></table></figure></p><h3 id="度量分析-1"><a href="#度量分析-1" class="headerlink" title="度量分析"></a>度量分析</h3><div class="table-container"><table><thead><tr><th>Class</th><th>OCavg</th><th>OCmax</th><th>WMC</th><th></th></tr></thead><tbody><tr><td>Calculate</td><td>2.57</td><td>8</td><td>18</td><td></td></tr><tr><td>ExprTerm</td><td>2.90</td><td>8</td><td>29</td><td></td></tr><tr><td>Lexer</td><td>4.33</td><td>14</td><td>26</td><td></td></tr><tr><td>MainClass</td><td>3.00</td><td>3</td><td>3</td><td></td></tr><tr><td>Parser</td><td>2.86</td><td>6</td><td>20</td><td></td></tr><tr><td>Simplify</td><td>8.00</td><td>12</td><td>24</td><td></td></tr><tr><td>TriSimplify</td><td>4.00</td><td>10</td><td>16</td><td></td></tr><tr><td>expr.Expr</td><td>1.75</td><td>4</td><td>7</td><td></td></tr><tr><td>expr.Number</td><td>1.00</td><td>1</td><td>2</td><td></td></tr><tr><td>expr.Power</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.SelfFun</td><td>6.00</td><td>16</td><td>18</td><td></td></tr><tr><td>expr.SumFun</td><td>3.33</td><td>6</td><td>10</td><td></td></tr><tr><td>expr.Term</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.TriFun</td><td>1.00</td><td>1</td><td>3</td><td></td></tr><tr><td>expr.VarX</td><td>1.00</td><td>1</td><td>2</td></tr></tbody></table></div><p>大部分类的复杂度可以接受，但Simplify和expr.SelfFun复杂度较高。<br>Simplify是因为本身比较复杂，而expr.SelfFun是因为结构不太合理，实际代码其实并不复杂。</p><h3 id="方法圈复杂度分析-1"><a href="#方法圈复杂度分析-1" class="headerlink" title="方法圈复杂度分析"></a>方法圈复杂度分析</h3><div class="table-container"><table><thead><tr><th>Method</th><th>CogC</th><th>ev(G)</th><th>iv(G)</th><th>v(G)</th></tr></thead><tbody><tr><td>Calculate.Calculate(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.add(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.cal()</td><td>5</td><td>3</td><td>2</td><td>7</td></tr><tr><td>Calculate.cutStr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.mul(String, String)</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>Calculate.pow(String, String)</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>Calculate.triFunCal(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.ExprTerm(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.compareTo(ExprTerm)</td><td>13</td><td>8</td><td>8</td><td>9</td></tr><tr><td>ExprTerm.countCos(String)</td><td>8</td><td>3</td><td>5</td><td>5</td></tr><tr><td>ExprTerm.countSin(String)</td><td>8</td><td>3</td><td>5</td><td>5</td></tr><tr><td>ExprTerm.countX(String)</td><td>4</td><td>1</td><td>3</td><td>3</td></tr><tr><td>ExprTerm.createTerm(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.equals(Object)</td><td>3</td><td>3</td><td>2</td><td>4</td></tr><tr><td>ExprTerm.getVarSorted()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.getVariate()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.hashCode()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.Lexer(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.getFuncStr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.getInput()</td><td>6</td><td>1</td><td>4</td><td>6</td></tr><tr><td>Lexer.getNumber()</td><td>3</td><td>1</td><td>4</td><td>4</td></tr><tr><td>Lexer.next()</td><td>27</td><td>7</td><td>14</td><td>22</td></tr><tr><td>Lexer.peek()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>MainClass.main(String[])</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>Parser.Parser(Lexer, HashMap<Character, String>)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Parser.createFunc(String)</td><td>1</td><td>3</td><td>3</td><td>3</td></tr><tr><td>Parser.isFunc(String)</td><td>1</td><td>2</td><td>1</td><td>2</td></tr><tr><td>Parser.parseExpr()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseFactor()</td><td>13</td><td>5</td><td>8</td><td>8</td></tr><tr><td>Parser.parsePower()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseTerm()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Simplify.printExpr(ExprTerm, StringBuilder, HashMap<ExprTerm, BigInteger>)</td><td>25</td><td>1</td><td>10</td><td>11</td></tr><tr><td>Simplify.sum(String)</td><td>3</td><td>2</td><td>3</td><td>3</td></tr><tr><td>Simplify.toSimplify(String, int, String[])</td><td>19</td><td>3</td><td>11</td><td>12</td></tr><tr><td>TriSimplify.TriSimplify(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>TriSimplify.strJudge(BigInteger, BigInteger, String[], String, String, String, String, …)</td><td>4</td><td>1</td><td>2</td><td>4</td></tr><tr><td>TriSimplify.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>TriSimplify.toTriSimplify()</td><td>41</td><td>8</td><td>11</td><td>12</td></tr><tr><td>expr.Expr.Expr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.addTerm(Term)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.setTriFunType(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.toString()</td><td>4</td><td>1</td><td>4</td><td>4</td></tr><tr><td>expr.Number.Number(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Number.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.Power()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.addFactor(Factor)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.SelfFun.SelfFun(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SelfFun.createFun()</td><td>20</td><td>1</td><td>10</td><td>15</td></tr><tr><td>expr.SelfFun.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SumFun.SumFun(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SumFun.createFun()</td><td>11</td><td>1</td><td>7</td><td>8</td></tr><tr><td>expr.SumFun.toString()</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>expr.Term.Term()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.addPower(Power)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.TriFun.TriFun(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.TriFun.getType()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.TriFun.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.VarX.VarX(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.VarX.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>三角函数化简方法TriSimplify.toTriSimplify()本身十分复杂，所以复杂度较高。</p><h3 id="化简策略-1"><a href="#化简策略-1" class="headerlink" title="化简策略"></a>化简策略</h3><p>除了第一次作业的化简外，添加了如下化简方式：<br>1.对于 sin(Term)**2 + cos(Term)** = 1 的化简，考虑到了所有的形式。<br>2.对于cos(0) = 1 的化简。<br>3.对于sin(0) = 0 的化简。</p><h3 id="Bug分析-1"><a href="#Bug分析-1" class="headerlink" title="Bug分析"></a>Bug分析</h3><p>互测没有出现bug，因为bug出在函数调用上，互测无法测试函数。<br>强测出现了一个bug，我在解析自定义函数递归调用Lexer和Parser时没有递归的替换字符串，导致表达式结构解析错误，<br>使得对于自定义函数中的三角函数，在生成后缀表达式时将缺少一个负号，带来了惨痛的后果。<br>出现了bug的方法和未出现bug的方法在代码行和圈复杂度上并没有明显差异。</p><h3 id="Hack策略-1"><a href="#Hack策略-1" class="headerlink" title="Hack策略"></a>Hack策略</h3><p>采用了随机生成数据与手动构造数据相结合的方法。<br>第二次作业相比于第一次作业复杂度提升了很多，所以测出了不少Bug。<br>分析同学代码发现 BUG 主要集中在对嵌套和各种函数的处理上。</p><h3 id="架构分析-1"><a href="#架构分析-1" class="headerlink" title="架构分析"></a>架构分析</h3><p>相比于第一次，加入了SumFun,SelfFun和TriFUn三个因子，并将化简方法提取成了Simplify类。<br>增加了一个用于三角函数化简的TriSimplify类。</p><h3 id="心得体会-1"><a href="#心得体会-1" class="headerlink" title="心得体会"></a>心得体会</h3><p>全面的测试非常重要。<br>笔者在课下较为全面的测试了各种情况，但在测试自定义函数时偷了懒，没有测试到带负号的三角函数，<br>最后导致了的毁灭性后果。</p><h2 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>本次作业中相比于第二次作业，增加了多种嵌套形式，其余相同。</p><h3 id="UML-图与类结构-2"><a href="#UML-图与类结构-2" class="headerlink" title="UML 图与类结构"></a>UML 图与类结构</h3><p>类图如下</p><p><img src="HW3.jpg" alt="HW3"></p><p>其中，各个类的含义如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|- MainClass：主类</span><br><span class="line">|- expr (<span class="keyword">package</span>)：表达式包</span><br><span class="line">    |- Factor (<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>)：因子类</span></span><br><span class="line">        |- Number：常数类</span><br><span class="line">        |- SelfFun：自定义函数</span><br><span class="line">        |- SumFun：求和函数</span><br><span class="line">        |- TriFun：三角函数</span><br><span class="line">        |- VarX：变量类</span><br><span class="line">        |- Power：指数类</span><br><span class="line">        |- Term：项类</span><br><span class="line">        |- Expr：表达式类</span><br><span class="line">|- Parser：语法分析器</span><br><span class="line">|- Lexer：词法分析器</span><br><span class="line">|- ExprTerm：表达式最简项</span><br><span class="line">|- OverSplit：项与因子提取类</span><br><span class="line">|- Calculate: 计算类</span><br><span class="line">|- Simplify: 同类项合并化简</span><br></pre></td></tr></table></figure></p><h3 id="度量分析-2"><a href="#度量分析-2" class="headerlink" title="度量分析"></a>度量分析</h3><div class="table-container"><table><thead><tr><th>Class</th><th>OCavg</th><th>OCmax</th><th>WMC</th><th></th></tr></thead><tbody><tr><td>Calculate</td><td>3.57</td><td>8</td><td>25</td><td></td></tr><tr><td>ExprTerm</td><td>2.29</td><td>8</td><td>16</td><td></td></tr><tr><td>Lexer</td><td>4.33</td><td>14</td><td>26</td><td></td></tr><tr><td>MainClass</td><td>3.00</td><td>3</td><td>3</td><td></td></tr><tr><td>OverSplit</td><td>11.00</td><td>16</td><td>22</td><td></td></tr><tr><td>Parser</td><td>2.86</td><td>6</td><td>20</td><td></td></tr><tr><td>Simplify</td><td>7.00</td><td>11</td><td>35</td><td></td></tr><tr><td>expr.Expr</td><td>1.75</td><td>4</td><td>7</td><td></td></tr><tr><td>expr.Number</td><td>1.00</td><td>1</td><td>2</td><td></td></tr><tr><td>expr.Power</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.SelfFun</td><td>4.40</td><td>11</td><td>22</td><td></td></tr><tr><td>expr.SumFun</td><td>3.67</td><td>7</td><td>11</td><td></td></tr><tr><td>expr.Term</td><td>1.67</td><td>3</td><td>5</td><td></td></tr><tr><td>expr.TriFun</td><td>1.00</td><td>1</td><td>3</td><td></td></tr><tr><td>expr.VarX</td><td>1.00</td><td>1</td><td>2</td></tr></tbody></table></div><p>OverSplit类的OCavg值很高，可能是因为if分支较多导致。</p><h3 id="方法圈复杂度分析-2"><a href="#方法圈复杂度分析-2" class="headerlink" title="方法圈复杂度分析"></a>方法圈复杂度分析</h3><div class="table-container"><table><thead><tr><th>Method</th><th>CogC</th><th>ev(G)</th><th>iv(G)</th><th>v(G)</th></tr></thead><tbody><tr><td>Calculate.Calculate(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.add(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.cal()</td><td>5</td><td>3</td><td>2</td><td>7</td></tr><tr><td>Calculate.cutStr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Calculate.mul(String, String)</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>Calculate.pow(String, String)</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>Calculate.triFunCal(String, String)</td><td>16</td><td>6</td><td>4</td><td>11</td></tr><tr><td>ExprTerm.ExprTerm(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.compareTo(ExprTerm)</td><td>13</td><td>8</td><td>8</td><td>9</td></tr><tr><td>ExprTerm.createTerm(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.equals(Object)</td><td>3</td><td>3</td><td>2</td><td>4</td></tr><tr><td>ExprTerm.getVarSorted()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.getVariate()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>ExprTerm.hashCode()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.Lexer(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.getFuncStr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Lexer.getInput()</td><td>6</td><td>1</td><td>4</td><td>6</td></tr><tr><td>Lexer.getNumber()</td><td>3</td><td>1</td><td>4</td><td>4</td></tr><tr><td>Lexer.next()</td><td>27</td><td>7</td><td>14</td><td>22</td></tr><tr><td>Lexer.peek()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>MainClass.main(String[])</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>OverSplit.divideFactor(HashMap<String, Integer>, String)</td><td>56</td><td>7</td><td>22</td><td>25</td></tr><tr><td>OverSplit.divideTerm(String)</td><td>11</td><td>1</td><td>6</td><td>7</td></tr><tr><td>Parser.Parser(Lexer, HashMap<Character, String>)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>Parser.createFunc(String)</td><td>1</td><td>3</td><td>3</td><td>3</td></tr><tr><td>Parser.isFunc(String)</td><td>1</td><td>2</td><td>1</td><td>2</td></tr><tr><td>Parser.parseExpr()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseFactor()</td><td>13</td><td>5</td><td>8</td><td>8</td></tr><tr><td>Parser.parsePower()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Parser.parseTerm()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td>Simplify.getExprTerm(String)</td><td>9</td><td>1</td><td>4</td><td>5</td></tr><tr><td>Simplify.getNumber(String, int)</td><td>5</td><td>3</td><td>4</td><td>4</td></tr><tr><td>Simplify.printExpr(ExprTerm, StringBuilder, HashMap<ExprTerm, BigInteger>)</td><td>25</td><td>1</td><td>10</td><td>11</td></tr><tr><td>Simplify.sum(String)</td><td>14</td><td>2</td><td>11</td><td>13</td></tr><tr><td>Simplify.toSimplify(String)</td><td>17</td><td>3</td><td>10</td><td>11</td></tr><tr><td>expr.Expr.Expr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.addTerm(Term)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.setTriFunType(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Expr.toString()</td><td>4</td><td>1</td><td>4</td><td>4</td></tr><tr><td>expr.Number.Number(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Number.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.Power()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.addFactor(Factor)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Power.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.SelfFun.SelfFun(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SelfFun.countLevel(int, int)</td><td>2</td><td>1</td><td>2</td><td>3</td></tr><tr><td>expr.SelfFun.createFun()</td><td>8</td><td>1</td><td>5</td><td>7</td></tr><tr><td>expr.SelfFun.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SelfFun.varCreate(StringBuilder[], int)</td><td>16</td><td>1</td><td>10</td><td>13</td></tr><tr><td>expr.SumFun.SumFun(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.SumFun.createFun()</td><td>13</td><td>1</td><td>9</td><td>10</td></tr><tr><td>expr.SumFun.toString()</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>expr.Term.Term()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.addPower(Power)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.Term.toString()</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td>expr.TriFun.TriFun(String, String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.TriFun.getType()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.TriFun.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.VarX.VarX(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>expr.VarX.toString()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p>OverSplit.divideFactor方法因为if分支较多导致复杂度较高。</p><h3 id="化简策略-2"><a href="#化简策略-2" class="headerlink" title="化简策略"></a>化简策略</h3><p>与第二次作业大致相同，但删去了对于 sin(Term)**2 + cos(Term)** = 1 的化简。</p><h3 id="Bug分析-2"><a href="#Bug分析-2" class="headerlink" title="Bug分析"></a>Bug分析</h3><p>本次在互测中出现了一个bug，也是由于递归调用Lexer和Parser时字符串替换没有随之递归而导致的。<br>出现了bug的方法和未出现bug的方法在代码行和圈复杂度上并没有明显差异。</p><h3 id="Hack策略-2"><a href="#Hack策略-2" class="headerlink" title="Hack策略"></a>Hack策略</h3><p>主要采用随机爆破的方式，同时手动构造了一些可能导致Format Error和爆int爆栈的数据。<br>Hack成果显著，很多同学考虑的并没有那么全面</p><h3 id="架构分析-2"><a href="#架构分析-2" class="headerlink" title="架构分析"></a>架构分析</h3><p>第三次作业架构变化不大。<br>增加了一个OverSplit类用来代替之前使用的split方法，用以提取项和因子。<br>前两次作业使用的正则表达式不再适用，本次作业使用HashMap用于合并同类项。<br>其他部分大致与第二次作业一致。</p><h3 id="心得体会-2"><a href="#心得体会-2" class="headerlink" title="心得体会"></a>心得体会</h3><p>代码架构的设计对于面向对象编程是非常重要的，好的架构能让编码事半功倍，反之亦然。</p><h2 id="第一单元心得体会"><a href="#第一单元心得体会" class="headerlink" title="第一单元心得体会"></a>第一单元心得体会</h2><p>第一单元主要使我对于 Java 的了解更加深入了，对于某些方法更加的熟悉，并且了解了递归下降的方法。<br>在对于代码的不断重构中，我体会到了架构对于面对对象编程的重要性。<br>类的变量是状态，类的方法是行为，面对对象本身就是对自然世界的抽象表述，<br>而更加合理的类的划分与各种各样的设计模型，将是我之后学习的重点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> BUAA-OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello MyBlog</title>
      <link href="/2021/12/18/Hello-Blog/"/>
      <url>/2021/12/18/Hello-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><ul><li>博客终于建好了，写段C语言助助兴</li><li>!!!∑(ﾟДﾟノ)ノ<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,i;</span><br><span class="line">double a[100],x[100];</span><br><span class="line">double sum,sum1=0,sum2=0;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入你的科目数："</span>); </span><br><span class="line">scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入各个学科分数及其学分：\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf(<span class="string">"%lf%lf"</span>,&amp;x[i],&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[i]&gt;=60)</span><br><span class="line">sum=4.0-3*(100-x[i])*(100-x[i])/1600;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum=0;</span><br><span class="line">sum1+=a[i]*sum;</span><br><span class="line">sum2+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"您的GPA为：%.4lf\n\n输入任意字符结束"</span>,sum1/sum2);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">return</span> 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-End"><a href="#Quick-End" class="headerlink" title="Quick End"></a>Quick End</h2></li><li>终于好了，复习考试去（狗头</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2021/12/15/Hexo-Theme-Snail/"/>
      <url>/2021/12/15/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Sisyphus!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/Sisyphus.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="comment"># - friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="comment"># - category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">0</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="comment"># friends: [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         title: "Dusign's Blog",</span></span><br><span class="line"><span class="comment">#         href: "https://blog.csdn.net/d_Nail"</span></span><br><span class="line"><span class="comment">#     &#125;,&#123;</span></span><br><span class="line"><span class="comment">#         title: "Dusign's Web",</span></span><br><span class="line"><span class="comment">#         href: "#"</span></span><br><span class="line"><span class="comment">#     &#125;,&#123;</span></span><br><span class="line"><span class="comment">#         title: "Dusign's Github",</span></span><br><span class="line"><span class="comment">#         href: "https://github.com/dusign"</span></span><br><span class="line"><span class="comment">#     &#125;,&#123;</span></span><br><span class="line"><span class="comment">#         title: "Other",</span></span><br><span class="line"><span class="comment">#         href: "#"</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
